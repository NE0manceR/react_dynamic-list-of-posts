{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","postByUserId","showPost","activePost","className","map","id","title","userId","type","onClick","NewCommentForm","addComment","useState","postId","name","email","body","newComment","setnewComment","inputValue","event","state","value","a","preventDefault","useEffect","onSubmit","console","log","required","onChange","target","placeholder","BASE_URL","fetch","then","json","postsDetails","getPostComments","commentsByid","deleteComment","method","headers","JSON","stringify","PostDetails","post","comment","setComment","showComments","setShowComments","removeComment","com","length","writeComment","App","allUsers","setAllUsers","allPosts","setAllPosts","setpostByuserId","postDetail","setPostDetail","showPostDetail","undefined","getPostDetails","getPosts","getUsers","user","live","filter","u","username","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cb0f4ed.chunk.js","sourcesContent":["import { Fragment } from 'react';\nimport './PostsList.scss';\n\ninterface Porps {\n  posts: Post[] | null,\n  postByUserId: number | null,\n  showPost: (id:number) => void,\n  activePost: number | undefined,\n}\n\nexport const PostsList: React.FC<Porps> = ({\n  posts, postByUserId, showPost, activePost,\n}) => {\n  return (\n    (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        <ul className=\"PostsList__list\">\n          {posts?.map(({ id, title, userId }) => (\n            <Fragment key={id}>\n              {postByUserId === 0\n                ? (\n                  <li key={id} className=\"PostsList__item\">\n                    <div>\n                      <b>\n                        [User #\n                        {userId}\n                        ]:\n                        {' '}\n                      </b>\n                      {title}\n                    </div>\n                    <button\n                      type=\"button\"\n                      className={`PostsList__button button ${activePost === id && 'active_btn'}`}\n                      onClick={() => {\n                        showPost(id);\n                      }}\n                    >\n                      {activePost === id ? 'Close' : 'Open'}\n                    </button>\n                  </li>\n                )\n                : postByUserId === userId\n                && (\n                  <li key={id} className=\"PostsList__item\">\n                    <div>\n                      <b>\n                        [User #\n                        {userId}\n                        ]:\n                        {' '}\n                      </b>\n                      {title}\n                    </div>\n                    <button\n                      type=\"button\"\n                      className={`PostsList__button button ${activePost === id && 'active_btn'}`}\n                      onClick={() => {\n                        showPost(id);\n                      }}\n                    >\n                      {activePost === id ? 'Close' : 'Open'}\n                    </button>\n                  </li>\n                )}\n            </Fragment>\n          ))}\n        </ul>\n      </div>\n    )\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  id: number,\n  addComment: (newComment:AddComment) => void\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ id, addComment }) => {\n  const [newComment, setnewComment] = useState<AddComment>(\n    {\n      postId: 0,\n      name: '',\n      email: '',\n      body: '',\n    },\n  );\n\n  useEffect(() => {\n    setnewComment(state => ({ ...state, postId: id }));\n  }, [id]);\n\n  function inputValue(event:HTMLInputElement | HTMLTextAreaElement) {\n    setnewComment(state => ({ ...state, [event.name]: event.value }));\n  }\n\n  async function sendComment(event:React.ChangeEvent<HTMLFormElement>) {\n    event.preventDefault();\n    await addComment(newComment);\n    setnewComment({\n      postId: 0,\n      name: '',\n      email: '',\n      body: '',\n    });\n  }\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={sendComment}\n    >\n      {console.log(id)}\n      <div className=\"form-field\">\n        <input\n          required\n          onChange={(event) => {\n            inputValue(event.target);\n          }}\n          type=\"text\"\n          name=\"name\"\n          value={newComment.name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          required\n          onChange={(event) => {\n            inputValue(event.target);\n          }}\n          type=\"text\"\n          value={newComment.email}\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          required\n          onChange={(event) => {\n            inputValue(event.target);\n          }}\n          value={newComment.body}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","/* eslint-disable no-console */\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getPosts():Promise<Post[]> {\n  return fetch(`${BASE_URL}/posts`)\n    .then(posts => posts.json());\n}\n\nexport async function getUsers():Promise<User[]> {\n  return fetch(`${BASE_URL}/users`)\n    .then(posts => posts.json());\n}\n\nexport async function getPostDetails(id:number):Promise<Post> {\n  return fetch(`${BASE_URL}/posts/${id}`)\n    .then(postsDetails => postsDetails.json());\n}\n\nexport async function getPostComments(id:number):Promise<Comment[]> {\n  return fetch(`${BASE_URL}/comments/?postId=${id}`)\n    .then(commentsByid => commentsByid.json());\n}\n\nexport function deleteComment(id:number) {\n  return fetch(`${BASE_URL}/comments/${id}`, { method: 'DELETE' });\n}\n\nexport function addComment(newComment: AddComment) {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify(\n      newComment,\n    ),\n  });\n}\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostComments, deleteComment, addComment } from '../../api/api';\n\ninterface Props {\n  post: Post,\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comment, setComment] = useState<Comment[] | []>([]);\n  const [showComments, setShowComments] = useState(false);\n\n  async function removeComment(id:number) {\n    await deleteComment(id);\n\n    getPostComments(post.id)\n      .then(com => {\n        setComment(com);\n      });\n  }\n\n  async function writeComment(newComment: AddComment) {\n    await addComment(newComment);\n\n    getPostComments(post.id)\n      .then(com => {\n        setComment(com);\n      });\n  }\n\n  useEffect(() => {\n    removeComment(post.id);\n  }, [post]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>\n        Post details:\n\n      </h2>\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comment?.length !== 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setShowComments(state => !state);\n            }}\n          >\n            {showComments ? ' Hide' : 'Show'}\n            {' '}\n            {comment.length}\n            {' '}\n            comments\n          </button>\n        )}\n\n        {showComments\n            && (\n              <ul className=\"PostDetails__list\">\n                {comment?.map(({ body, id }) => (\n                  <li key={id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        removeComment(id);\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addComment={(newComment: AddComment) => {\n              writeComment(newComment);\n            }}\n            id={post.id}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUsers, getPostDetails } from './api/api';\n\nconst App: React.FC = () => {\n  const [allUsers, setAllUsers] = useState<User[] | null>(null);\n  const [allPosts, setAllPosts] = useState<Post[] | null>(null);\n  const [postByUserId, setpostByuserId] = useState<number | null>(0);\n  const [postDetail, setPostDetail] = useState<Post | null>(null);\n\n  function showPostDetail(id:number) {\n    if (postDetail?.id !== undefined && postDetail?.id === id) {\n      setPostDetail(null);\n    } else {\n      getPostDetails(id)\n        .then(post => setPostDetail(post));\n    }\n  }\n\n  useEffect(() => {\n    getPosts()\n      .then(posts => {\n        setAllPosts(posts);\n      });\n\n    getUsers()\n      .then(user => {\n        const live = user.filter(u => u.username !== null && u.username !== '');\n\n        setAllUsers(live);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <div>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setpostByuserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {allUsers?.map((user) => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </div>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            postByUserId={postByUserId}\n            posts={allPosts}\n            activePost={postDetail?.id}\n            showPost={(id:number) => {\n              showPostDetail(id);\n            }}\n          />\n        </div>\n\n        { postDetail !== null && (\n          <div className=\"App__content\">\n            <PostDetails\n              post={postDetail}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}